import React, { useState, useEffect, useCallback, memo } from "react";

const URL = "https://jsonplaceholder.typicode.com/users";

type Company = {
  bs: string;
  catchPhrase: string;
  name: string;
};

type User = {
  id: number;
  email: string;
  name: string;
  phone: string;
  username: string;
  website: string;
  company: Company;
  address: any;
};

interface IButtonProps {
  onClick: () => void;
}

const Button: React.FC<IButtonProps> = ({ onClick }) => {
  return (
    <button type="button" onClick={onClick}>
      get random user
    </button>
  );
};

interface IUserInfoProps {
  user: User | null;
}

const UserInfo: React.FC<IUserInfoProps> = ({ user }) => {
  return (
    <table>
      <thead>
        <tr>
          <th>Username</th>
          <th>Phone number</th>
        </tr>
      </thead>
      <tbody>
        {user && (
          <tr>
            <td>{user.name}</td>
            <td>{user.phone}</td>
          </tr>
        )}
      </tbody>
    </table>
  );
};

const useThrottle = <T extends (...args: any[]) => any>(
  func: T,
  delay: number
): T => {
  const [isThrottled, setIsThrottled] = useState(false);

  const throttledFunction = useCallback(
    (...args: any[]) => {
      if (!isThrottled) {
        setIsThrottled(true);
        func(...args);
        setTimeout(() => {
          setIsThrottled(false);
        }, delay);
      }
    },
    [delay, func, isThrottled]
  );

  return throttledFunction as T;
};

const MemoizedButton = memo(Button);

const App: React.FC = () => {
  const [item, setItem] = useState<Record<number, User> | null>(null);

  const receiveRandomUser = useCallback(async () => {
    try {
      const id = Math.floor(Math.random() * (10 - 1)) + 1;
      const response = await fetch(`${URL}/${id}`);
      const user = (await response.json()) as User;
      setItem((prevItems) => ({ ...prevItems, [id]: user }));
    } catch (error) {
      console.error("Error fetching random user:", error);
    }
  }, []);

  const handleButtonClick = useCallback(() => {
    receiveRandomUser();
  }, [receiveRandomUser]);

  const throttledHandleButtonClick = useThrottle(handleButtonClick, 2000);

  useEffect(() => {
    receiveRandomUser();
  }, [receiveRandomUser]);

  return (
    <div>
      <header>Get a random user</header>
      <MemoizedButton onClick={throttledHandleButtonClick} />
      <UserInfo user={item && Object.values(item)[0]} />
    </div>
  );
};

export default App;
